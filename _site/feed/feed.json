{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Your Blog Name",
  "language": "en",
  "home_page_url": "https://example.com/",
  "feed_url": "https://example.com/feed/feed.json",
  "description": "I am writing about my experiences as a naval navel-gazer.",
  "author": {
    "name": "Your Name Here",
    "url": "https://example.com/about-me/"
  },
  "items": [{
      "id": "https://example.com/posts/vue-context-api-with-observable-and-provide-inject/",
      "url": "https://example.com/posts/vue-context-api-with-observable-and-provide-inject/",
      "title": "",
      "content_html": "<p>Context api is a mechanism to share state between components popularized by the reac team. Though Vue.js officially doesn't have anything like that(arguably we don't need it because of vuex) but we can have something similar using <a href=\"https://vuejs.org/v2/api/#Vue-observable\">Vue.observable</a> and <a href=\"https://vuejs.org/v2/api/#provide-inject\">Provide, Inject</a>.</p>\n<p><strong>Let's see how we can do that:</strong></p>\n<p>Let's say we have a simple applicaion where we need to show user's avatar on header and we also have a settings page where we can update user's profile.</p>\n<p><strong>App.vue</strong></p>\n<pre><code>&lt;template&gt;\n  &lt;div id=&quot;app&quot;&gt;\n    &lt;Header/&gt;\n    &lt;UserProfile/&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport Vue from &quot;vue&quot;;\nimport UserProfile from &quot;./components/UserProfile&quot;;\nimport Header from &quot;./components/Header&quot;;\nconst user = Vue.observable({\n  name: &quot;Soikat&quot;,\n  age: 32,\n  avatar: &quot;https://loremflickr.com/320/240&quot;,\n  updateData(payload) {\n    const { avatar, name, age } = payload;\n    if (avatar) user.avatar = avatar;\n    if (name) user.name = name;\n    if (age) user.age = age;\n  }\n});\nexport default {\n  name: &quot;App&quot;,\n  components: {\n    UserProfile,\n    Header\n  },\n  provide: {\n    user\n  }\n};\n&lt;/script&gt;\n\n&lt;style&gt;\n#app {\n  font-family: &quot;Avenir&quot;, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n&lt;/style&gt;\n</code></pre>\n<p>Here you can see we have created an object using Vue.observable and provided this for child components of <code>&lt;App /&gt;</code> to consume.</p>\n<p><strong>Header.vue</strong></p>\n<pre><code>&lt;template&gt;\n  &lt;nav class=&quot;navigation&quot;&gt;\n    \n    &lt;img class=&quot;profile-image&quot; width=&quot;50&quot; height=&quot;50&quot; :src=&quot;user.avatar&quot;&gt;\n  &lt;/nav&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &quot;Header&quot;,\n  inject: [&quot;user&quot;]\n};\n&lt;/script&gt;\n\n&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;\n&lt;style scoped&gt;\n.navigation {\n  display: flex;\n  background: #ccc;\n  min-height: 70px;\n  text-align: right;\n  align-items: center;\n  justify-content: flex-end;\n}\n.profile-image {\n  border-radius: 50%;\n  border: 1px solid #fff;\n  padding: 4px;\n  margin-left: 10px;\n}\n&lt;/style&gt;\n</code></pre>\n<p>Here we are injecting <code>user</code> object and also using that object to display user name and avatar.</p>\n<p><strong>UserProfile.vue</strong></p>\n<pre><code>&lt;template&gt;\n  &lt;div&gt;\n    &lt;div&gt;\n      Name:\n      &lt;input type=&quot;text&quot; v-model=&quot;userName&quot;&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      Age:\n      &lt;input type=&quot;text&quot; v-model=&quot;userAge&quot;&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      Avatar:\n      &lt;input type=&quot;text&quot; v-model=&quot;userAvatar&quot;&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;button @click=&quot;updateUser&quot;&gt;Update&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default {\n  name: &quot;UserProfile&quot;,\n  inject: [&quot;user&quot;],\n  data() {\n    return {\n      userName: &quot;&quot;,\n      userAge: &quot;&quot;,\n      userAvatar: &quot;&quot;\n    };\n  },\n  created() {\n    const { name, age, avatar } = this.user;\n    this.userName = name;\n    this.userAge = age;\n    this.userAvatar = avatar;\n  },\n  methods: {\n    updateUser() {\n      const payload = {\n        name: this.userName,\n        age: this.userAge,\n        avatar: this.userAvatar\n      };\n      const { updateData } = this.user;\n      updateData(payload);\n    }\n  }\n};\n&lt;/script&gt;\n</code></pre>\n<p>Here we can update the user object without mutating it directly.</p>\n<p>Here is working example in action -</p>\n<iframe\n     src=\"https://codesandbox.io/embed/sweet-sanne-0hpcj?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"sweet-sanne-0hpcj\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-autoplay allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n></iframe>\n<p>What we have achieved could have easily be done using vuex, and I would recommend to use vuex for larger applications, for smaller applications this patten can be used.</p>\n",
      "date_published": "2021-10-03T17:31:34Z"
    },{
      "id": "https://example.com/posts/css-values-in-javascript/",
      "url": "https://example.com/posts/css-values-in-javascript/",
      "title": "",
      "content_html": "<p>Occassionally while working with the dom(document object model) in JavaScript you might have to access CSS values of a certain dom element. There are couple of ways to do it. Let's check them out.</p>\n<h3 id=\"getting-inline-css-styles\">Getting inline CSS styles <a class=\"direct-link\" href=\"#getting-inline-css-styles\">#</a></h3>\n<p>Inline CSS are CSS that are directly added to the dom, for example something like this</p>\n<pre><code>&lt;div id=&quot;app&quot; style=&quot;width: 200px; height: 200px; background: rebeccapurple; font-size: 23px;&quot;&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n\tconst element = document.querySelector('#app');\n\tconsole.log(element.style.width);\n\tconsole.log(element.style.height);\n\tconsole.log(element.fontSize);\n\t\n&lt;/script&gt;\n\n</code></pre>\n<p>As you can see, the inline CSS could be retrived by accessing style property of the element. Don't be fooled by seemingly decieving <code>style</code> property. You won't be able to access external CSS for any element with this.</p>\n<p>You can also use <code>cssText</code> property of element's <code>style</code> property to get text representation of element's inline css</p>\n<pre><code>&lt;script&gt;\n\tconst element = document.querySelector('#app');\n\tconsole.log(element.style.cssText);\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"getting-external-css(computed-style)\">Getting external CSS(Computed Style) <a class=\"direct-link\" href=\"#getting-external-css(computed-style)\">#</a></h3>\n<p>You can get any element's computed CSS property using <code>getComputedStyle()</code> method. This will return all CSS of an element, not only the CSS added in the stylesheets.</p>\n<pre><code>&lt;style&gt;\n#app2{\n\twidth: 200px;\n\theight: 200px;\n\tborder: 1px solid #ccc;\n\tborder-radius: 5px;\n}\n&lt;/style&gt;\n&lt;div id=&quot;app2&quot;&gt;\n&lt;/div&gt;\n&lt;script&gt;\n\tconst app2 = document.querySelector('#app2');\n\tconsole.log(window.getComputedStyle(app2));\n&lt;/script&gt;\n</code></pre>\n<p>This will return all the CSS that element has, including the one you added on Stylesheet, you can use dot(<code>.</code>) notation or bracket notation to access any specific property you want.</p>\n<pre><code>&lt;script&gt;\n\tconst properties = window.getComputedStyle(app2);\n\tconstole.log(properties.borderRadius)\n\tconsole.log(properties.width);\n\tconsole.log(properties['height'])\n&lt;/script&gt;\n</code></pre>\n",
      "date_published": "2021-10-03T17:31:34Z"
    },{
      "id": "https://example.com/posts/ajax-calls-with-generator/",
      "url": "https://example.com/posts/ajax-calls-with-generator/",
      "title": "",
      "content_html": "<p>Let's first get familiar with generator, generator is special type of function which you can pause and resume at will. Here is a simple generaor</p>\n<p><strong>Simple Generator Function</strong></p>\n<pre><code>function* getNumers() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst iterator = getNumers();\n//This does nothing, as the generator is not stared yet, we have to star it by calling .next\niterator.next(); // output {value: 1, done: false}\niterator.next(); // output {value: 2, done: false}\niterator.next(); // output {value: 3, done: true};\niterator.next(); // output {value: undefined, done: true}\n/*\nAs you can see, generator doesn't just return the\nvalue, it returns a special kind of object with\nvalue on it, once the final value is yielded then\ndone becomes true and value becomes undefined on\nsubsequent runs.\n*/\n\n</code></pre>\n<p>This is not very useful, but later we will see, how we can use generators to simplify our ajax calls.</p>\n<p>Making ajax request has always been tricky in JavaScript. JavaScript is a single threaded language, so we don't want to pause the event loop when we make ajax requests, to solve this previously we used the callback pattern. Though It solved the problem, from time to time we would end up with callback hell.The introduction of Promises solved this to some extent, but sometimes Promise is not enough when we want to make several nested ajax requests, we can end up with Pyramid of doom. Let's explore an example -</p>\n<p><strong>Using Promises</strong></p>\n<pre><code> function getGithubFollowers(userName) {\n  return ajax(`https://api.github.com/users/${userName}`)\n   .then(response =&gt; {\n    const { followers_url } = response\n    return ajax(followers_url)\n   })\n }\n\n const followers = getGithubFollowers('azs06')\n console.log(followers)\n</code></pre>\n<p>This is a very simple example, but we might end up in a situation where we have to make several ajax calls to get the information we need to make another server call, then things could get messy and we could end up with pyramid of doom. We can use generators and coroutine to make it more elegent and avoid pyramid of doom.</p>\n<p><strong>Using Generators and Coroutine</strong></p>\n<pre><code>const bluebird = require('bluebird')\n\nfunction* getGithubFollowers(userName) {\n  const user = yield ajax(`https://api.github.com/users/${userName}`)\n  const { followers_url } = user\n  const followers = yield ajax(followers_url)\n  return followers;\n}\n\nconst ajaxRoutine = bluebird.coroutine(getGithubFollowers)\n\najaxRoutine('azs06').catch(error =&gt; console.log(error)).then((response) =&gt; console.log(response))\n\n</code></pre>\n<p>As you can see, from the look of it, it's much more easier to read and reason with.</p>\n<p>I know for this simpler example this seems a overkill, but for a larger application with houndreds of server calls this can do wonders.</p>\n<p>You can also get similar ajax request flow by using <code>async</code> <code>await</code>, Which is built on top of generators.</p>\n<p><strong>Using Async Await</strong></p>\n<pre><code>async function getGithubFollowers(userName) {\n  const user = await ajax(`https://api.github.com/users/${userName}`)\n  const { followers_url } = user\n  const followers = await ajax(followers_url)\n  return followers;\n}\n\n\ngetGithubFollowers('azs06').then(response =&gt; console.log(response))\n\n</code></pre>\n<p>This seems a better choice, considering we don't have to use another library(coroutine), but learning and using generators will help you understand how async await working underneath. Also you can't pause and pass parameter at the middle of async await function, which you can do with generators. The power of generator is that you can pause it and resume it at will. This opens up opportunity to use generator many more creative ways.</p>\n<p>To Learn more about Generators -</p>\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function</a>*</li>\n<li><a href=\"https://davidwalsh.name/es6-generators\">https://davidwalsh.name/es6-generators</a></li>\n<li><a href=\"https://richardartoul.github.io/javascript/2015/07/16/promises-generators.html\">https://richardartoul.github.io/javascript/2015/07/16/promises-generators.html</a></li>\n<li><a href=\"https://x.st/javascript-coroutines/\">https://x.st/javascript-coroutines/</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=QOnUcU8U_XE\">Generators in JavaScript by Fun Fun Function</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Zk_rX2n3Ml8\">Generator by Kyle Robinson Young</a></li>\n</ol>\n",
      "date_published": "2021-10-03T17:31:34Z"
    }
  ]
}
